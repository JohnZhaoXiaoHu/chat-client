{"version":3,"sources":["webpack:///./src/views/sound-record-compression.vue?8ff0","webpack:///./src/views/sound-record-compression.vue?a82c","webpack:///./src/views/sound-record-compression.vue?e3f8","webpack:///./src/views/sound-record-compression.vue","webpack:///./src/views/sound-record-compression.vue?1915","webpack:///./src/views/sound-record-compression.vue?a866"],"names":["module","exports","render","_vm","this","_h","$createElement","_c","_self","class","$style","inner","attrs","volume","_v","_s","recordingTime","on","$event","audioData","length","record","stopRecord","playAudio","downloadToLocal","staticRenderFns","timer","compressionSamplingRate","sampleRate","currentFile","navigator","mediaDevices","getUserMedia","audio","channelCount","video","stream","mediaStream","ac","AudioContext","mediaNode","createMediaStreamSource","creator","createScriptProcessor","bind","jsNode","connect","destination","onaudioprocess","e","audioBuffer","inputBuffer","getChannelData","push","slice","setInterval","console","log","name","alert","tracks","getTracks","clearInterval","forEach","track","stop","disconnect","mergeArray","createAudioFile","compressedData","components","RealVolume","sampleBits","samplingRate","bufferLength","buffer","ArrayBuffer","view","DataView","index","writeUTFBytes","setUint32","setUint16","data","s","Math","max","min","val","parseInt","String","setInt8","File","Date","toISOString","replace","type","offset","string","i","setUint8","charCodeAt","arr","floatArray","Float32Array","item","set","sampling","compression","dataLength","injectStyles","context","locals","component","VBtn"],"mappings":"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","file":"js/sound-record-compression.9d67d3bb.js","sourcesContent":["export { default } from  \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-0-0!../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-0-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-0-2!../../node_modules/stylus-loader/index.js??ref--11-oneOf-0-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./sound-record-compression.vue?vue&type=style&index=0&lang=stylus&rel=stylesheet%2Fstylus&module=true&\"; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-0-0!../../node_modules/css-loader/dist/cjs.js??ref--11-oneOf-0-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-0-2!../../node_modules/stylus-loader/index.js??ref--11-oneOf-0-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./sound-record-compression.vue?vue&type=style&index=0&lang=stylus&rel=stylesheet%2Fstylus&module=true&\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"sound-record-compression_inner_34vjn\"};","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{class:_vm.$style.inner},[_c('RealVolume',{attrs:{\"volume\":_vm.volume}}),_c('div',[_vm._v(_vm._s(_vm.recordingTime/10)+\"s\")]),_c('v-btn',{on:{\"click\":function($event){_vm.audioData.length===0?_vm.record():_vm.stopRecord()}}},[_vm._v(_vm._s(_vm.audioData.length===0?'录制':'停止录制'))]),_c('v-btn',{on:{\"click\":_vm.playAudio}},[_vm._v(\"播放录音\")]),_c('v-btn',{on:{\"click\":_vm.downloadToLocal}},[_vm._v(\"保存为本地音乐文件\")])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\n\n\n\n\n\n\n\n\n\r\n/**\r\n * WebAudio+WebRTC音频录制，对音频进行了压缩\r\n * https://www.cnblogs.com/blqw/p/3782420.html\r\n */\r\nimport { Component, Vue } from 'vue-property-decorator'\r\nimport RealVolume from '@/components/real-volume.vue'\r\nimport { downloadToLocal, playAudio } from '@/utils/record'\r\n\r\nlet timer = 0\r\n// 压缩后的采样率\r\nlet compressionSamplingRate = 22050\r\nconst sampleRate = 44100\r\nconst channelNum = 1\r\n\r\n@Component({\r\n  components: { RealVolume }\r\n})\r\nexport default class SoundRecord2 extends Vue {\r\n  audioData: Array<Float32Array> = []// 音频数据\r\n  mediaStream!: MediaStream// 媒体流\r\n  currentFile: File | null = null// 当前录制音频文件流\r\n  jsNode!: ScriptProcessorNode\r\n  mediaNode!: MediaStreamAudioSourceNode\r\n  recordingTime = 0\r\n  volume = 0\r\n\r\n  /**\r\n   * 录制\r\n   * @returns {Promise<void>}\r\n   */\r\n  async record (): Promise<void> {\r\n    try {\r\n      // 获取麦克风媒体流\r\n      const stream = this.mediaStream = await navigator.mediaDevices.getUserMedia({\r\n        audio: {\r\n          sampleRate,\r\n          channelCount: 2\r\n        },\r\n        video: false\r\n      })\r\n\r\n      // 通过WebAudio保存录音\r\n      const ac = new AudioContext()\r\n      // 通过媒体流创建一个audioNode\r\n      const mediaNode = this.mediaNode = ac.createMediaStreamSource(stream)\r\n      // 创建ScriptProcessorNode操作用以处理音频\r\n      const creator = ac.createScriptProcessor.bind(ac)\r\n      const jsNode = this.jsNode = creator(16384, 1, 1)// 设置录制单声道，能有效减少录音文件的大小\r\n      this.recordingTime = 0\r\n      // 连接到AudioContext\r\n      jsNode.connect(ac.destination)\r\n      // 添加音频流入事件\r\n      jsNode.onaudioprocess = (e: AudioProcessingEvent) => {\r\n        const audioBuffer = e.inputBuffer\r\n        const audioData = audioBuffer.getChannelData(0)\r\n        this.volume = audioData[audioData.length - 1] + 1\r\n        // 这里有个坑，如果不进行深拷贝的话，录制出来的音频会有问题\r\n        this.audioData.push(audioData.slice(0))\r\n      }\r\n      // audioNode连接到jsNode\r\n      mediaNode.connect(jsNode)\r\n      timer = setInterval(() => {\r\n        this.recordingTime++\r\n      }, 100)\r\n    } catch (e) {\r\n      console.log(e)\r\n      if (e.name === 'TypeError') {\r\n        alert('当前环境不支持视频通话')\r\n      } else if (e.name === 'NotAllowedError') {\r\n        alert('请允许使用麦克风')\r\n      } else if (e.name === 'AbortError') {\r\n        console.log('中止')\r\n      } else if (e.name === 'NotFoundError') {\r\n        console.log('找不到')\r\n      } else if (e.name === 'OverConstrainedError') {\r\n        console.log('设备无法满足要求')\r\n      } else if (e.name === 'SecurityError') {\r\n        console.log('由于安全原因，被禁止')\r\n      }\r\n    }\r\n  }\r\n\r\n  stopRecord (): void {\r\n    const { mediaStream } = this\r\n    // 获取所有的媒体通道并停止他们\r\n    const tracks = mediaStream.getTracks()\r\n    clearInterval(timer)\r\n\r\n    tracks.forEach(track => {\r\n      track.stop()\r\n    })\r\n    // 停止录音\r\n    this.jsNode.disconnect()\r\n    this.mediaNode.disconnect()\r\n\r\n    // 合并数据\r\n    const audioData = mergeArray(this.audioData)\r\n    this.currentFile = createAudioFile(compressedData(audioData, 11025))\r\n    this.audioData = []\r\n  }\r\n\r\n  /**\r\n   * 下载至本地\r\n   */\r\n  async downloadToLocal (): Promise<void> {\r\n    try {\r\n      const { currentFile } = this\r\n      await downloadToLocal(currentFile as File, '请先录制完成，再下载')\r\n    } catch (e) {\r\n      alert(e)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 播放当前录制的音频\r\n   */\r\n  async playAudio (): Promise<void> {\r\n    try {\r\n      const { currentFile } = this\r\n      await playAudio(currentFile as File, '请先录制完成，再播放')\r\n    } catch (e) {\r\n      alert(e)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 根据合成的录音数据创建文件\r\n * @param {Float32Array} audioData 合成的数据\r\n * @returns {File} 创建的文件\r\n */\r\nfunction createAudioFile (audioData: Float32Array) {\r\n  const channelCount = 1// 通道数，减小通道数可以压缩文件\r\n  const sampleBits = 8// 采样位数，减小可以压缩文件，8/16\r\n  const samplingRate = compressionSamplingRate\r\n  const bufferLength = audioData.length * (sampleBits / 8) + 44\r\n  const buffer = new ArrayBuffer(bufferLength)\r\n  const view = new DataView(buffer)\r\n  let index = 44\r\n  // 下面的操作是创建文件头\r\n  writeUTFBytes(view, 0, 'RIFF')\r\n  // RIFF块长度\r\n  view.setUint32(4, 44 + audioData.length * 2, true)\r\n  // RIFF类型\r\n  writeUTFBytes(view, 8, 'WAVE')\r\n  // 格式块标识符\r\n  // FMT子块\r\n  writeUTFBytes(view, 12, 'fmt ')\r\n  // 格式块长度\r\n  view.setUint32(16, 16, true)\r\n  // 样本格式（原始）\r\n  view.setUint16(20, 1, true)\r\n  // 单声道（原来是双声道）\r\n  view.setUint16(22, channelCount, true)\r\n  // 采样率\r\n  view.setUint32(24, samplingRate, true)\r\n  // 字节率（采样率*块对齐）\r\n  view.setUint32(28, samplingRate * 2 * channelCount * (sampleBits / 8), true)\r\n  // 块对齐（通道数*每个样本字节）\r\n  view.setUint16(32, (sampleBits / 8) * channelCount, true)\r\n  // 每个样本位数\r\n  view.setUint16(34, sampleBits, true)\r\n  // 数据子块\r\n  // 数据块标识符\r\n  writeUTFBytes(view, 36, 'data')\r\n  // 数据块长度\r\n  view.setUint32(40, audioData.length * 2, true)\r\n\r\n  // 下面的操作是填入数据\r\n  for (const data of audioData) {\r\n    const s = Math.max(-1, Math.min(1, data))\r\n    let val = s < 0 ? s * 0x8000 : s * 0x7FFF\r\n    val = parseInt(String(255 / (65535 / (val + 32768))))\r\n    view.setInt8(index++, val)\r\n  }\r\n  return new File([buffer], (new Date()).toISOString().replace('T', ' '), {\r\n    type: 'audio/mpeg'\r\n  })\r\n}\r\n\r\n/**\r\n * 写入字节\r\n * @param {DataView} view\r\n * @param {number} offset\r\n * @param {string} string\r\n */\r\nfunction writeUTFBytes (view: DataView, offset: number, string: string) {\r\n  for (let i = 0; i < string.length; i++) {\r\n    view.setUint8(offset + i, string.charCodeAt(i))\r\n  }\r\n}\r\n\r\n/**\r\n * 合并单声道数据片段。因为Float32Array长度不能够动态调节，所以需要根据最终数据合成一个整体的Float32Array\r\n * @param {Array<Float32Array>} arr 数据片段数组\r\n * @returns {Float32Array} 返回一个包含所有片段的数组\r\n */\r\nfunction mergeArray (arr: Array<Float32Array>): Float32Array {\r\n  const length = arr.length * arr[0].length\r\n  const floatArray = new Float32Array(length)\r\n  let offset = 0\r\n  for (const item of arr) {\r\n    floatArray.set(item, offset)\r\n    offset += item.length\r\n  }\r\n  return floatArray\r\n}\r\n\r\n/**\r\n * 压缩数据，更改数据的采样率：\r\n *  - 现有的采样率除以压缩后的为压缩比例\r\n *  - 生成数据时，每一个压缩比例为一个数据间隔取数据\r\n *\r\n * @param {T} data 原始的数据\r\n * @param {22050 | 11025} sampling 压缩后的采样率\r\n * @returns {T} 返回压缩后的数据\r\n */\r\nfunction compressedData<T extends Float32Array> (data: T, sampling:22050|11025): T {\r\n  const compression = sampleRate / sampling\r\n  const dataLength = data.length / compression\r\n  const arr = new Float32Array(dataLength)\r\n  let index = 0\r\n\r\n  compressionSamplingRate = sampling\r\n\r\n  for (let i = 0; i < dataLength; i++, index += compression) {\r\n    arr[i] = data[index]\r\n  }\r\n\r\n  return arr as T\r\n}\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./sound-record-compression.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--14-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--14-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./sound-record-compression.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./sound-record-compression.vue?vue&type=template&id=92abc8ee&lang=pug&\"\nimport script from \"./sound-record-compression.vue?vue&type=script&lang=ts&\"\nexport * from \"./sound-record-compression.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./sound-record-compression.vue?vue&type=style&index=0&lang=stylus&rel=stylesheet%2Fstylus&module=true&\"\n\n\n\n\nfunction injectStyles (context) {\n  \n  this[\"$style\"] = (style0.locals || style0)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  null\n  \n)\n\nexport default component.exports\n\n/* vuetify-loader */\nimport installComponents from \"!../../node_modules/vuetify-loader/lib/runtime/installComponents.js\"\nimport { VBtn } from 'vuetify/lib/components/VBtn';\ninstallComponents(component, {VBtn})\n"],"sourceRoot":""}